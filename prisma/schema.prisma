generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  isOAuth               Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  charging_sessions     charging_sessions[]
  payments              payments[]
  vehicles              vehicles[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model charging_ports {
  id                BigInt              @id @default(autoincrement())
  station_id        BigInt
  power_kw          BigInt
  status            String              @db.VarChar(255)
  last_service_date DateTime?           @db.Date
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  charging_stations charging_stations   @relation(fields: [station_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "charging_ports_station_id_foreign")
  charging_sessions charging_sessions[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model charging_sessions {
  id              BigInt         @id @default(autoincrement())
  user_id         String
  vehicle_id      BigInt
  port_id         BigInt
  start_time      DateTime       @db.Date
  end_time        DateTime?      @db.Date
  energy_used_kwh Float
  total_cost      Float
  status          String         @db.VarChar(255)
  payment_status   String         @db.VarChar(255)
  charging_ports  charging_ports @relation(fields: [port_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "charging_sessions_port_id_foreign")
  users           User           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "charging_sessions_user_id_foreign")
  vehicles        vehicles       @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "charging_sessions_vehicle_id_foreign")
  payments        payments[]
}

model charging_stations {
  id             BigInt           @id @default(autoincrement())
  name           String           @db.VarChar(255)
  latitude       Float
  longitude      Float
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  charging_ports charging_ports[]
}

model discounts {
  id                   BigInt   @id
  code                 String   @db.VarChar(255)
  description          String   @db.VarChar(255)
  discround_percentage BigInt
  expiration_date      DateTime @db.Date
  created_at           DateTime @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id                BigInt            @id @default(autoincrement())
  user_id           String
  session_id        BigInt
  amount            Float
  status            String            @db.VarChar(255)
  transaction_id    BigInt
  payment_method    String            @db.VarChar(255)
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  charging_sessions charging_sessions @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payments_session_id_foreign")
  users             User              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payments_user_id_foreign")
}

model vehicles {
  id                          BigInt              @id @default(autoincrement())
  user_id                     String
  license_plate               String              @unique(map: "vehicles_license_plate_unique") @db.VarChar(255)
  brand                       String              @db.VarChar(255)
  battery_capacity_kwh        Int?
  battery_condition           Float?
  max_charging_powerkwh       BigInt?
  created_at                  DateTime            @default(now()) @db.Timestamptz(6)
  current_battery_capacity_kw Float               @default(0)
  charging_sessions           charging_sessions[]
  users                       User                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vehicles_user_id_foreign")
}

enum UserRole {
  ADMIN
  USER
}

enum user_role_enum {
  ADMIN
  USER
}
